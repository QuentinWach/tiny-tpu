$date
	Thu Jul 11 20:27:53 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tpu $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # start $end
$var wire 8 $ weight4 [7:0] $end
$var wire 8 % weight3 [7:0] $end
$var wire 8 & weight2 [7:0] $end
$var wire 8 ' weight1 [7:0] $end
$var wire 1 ( valid $end
$var wire 8 ) systolic_acc_out2 [7:0] $end
$var wire 8 * systolic_acc_out1 [7:0] $end
$var wire 1 + store $end
$var wire 8 , out_ub_to_input_setup_11 [7:0] $end
$var wire 8 - out_ub_to_input_setup_10 [7:0] $end
$var wire 8 . out_ub_to_input_setup_01 [7:0] $end
$var wire 8 / out_ub_to_input_setup_00 [7:0] $end
$var wire 1 0 load_weight $end
$var wire 1 1 load_input $end
$var wire 13 2 base_address [12:0] $end
$var wire 8 3 acc2_mem_1_to_ub [7:0] $end
$var wire 8 4 acc2_mem_0_to_ub [7:0] $end
$var wire 1 5 acc2_full $end
$var wire 8 6 acc1_mem_1_to_ub [7:0] $end
$var wire 8 7 acc1_mem_0_to_ub [7:0] $end
$var wire 1 8 acc1_full $end
$var wire 8 9 a_in2 [7:0] $end
$var wire 8 : a_in1 [7:0] $end
$scope module acc1 $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 ( valid $end
$var wire 8 ; acc_in [7:0] $end
$var reg 8 < acc_mem_0 [7:0] $end
$var reg 8 = acc_mem_1 [7:0] $end
$var reg 1 8 full $end
$var reg 2 > index [1:0] $end
$var integer 32 ? i [31:0] $end
$upscope $end
$scope module acc2 $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 ( valid $end
$var wire 8 @ acc_in [7:0] $end
$var reg 8 A acc_mem_0 [7:0] $end
$var reg 8 B acc_mem_1 [7:0] $end
$var reg 1 5 full $end
$var reg 2 C index [1:0] $end
$var integer 32 D i [31:0] $end
$upscope $end
$scope module cu $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # start $end
$var reg 13 E base_address [12:0] $end
$var reg 16 F instruction [15:0] $end
$var reg 1 1 load_input $end
$var reg 1 0 load_weight $end
$var reg 2 G state [1:0] $end
$var reg 1 + store $end
$var reg 1 ( valid $end
$var integer 32 H compute_cycle_counter [31:0] $end
$var integer 32 I instruction_pointer [31:0] $end
$upscope $end
$scope module is $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 ( valid $end
$var wire 8 J a22 [7:0] $end
$var wire 8 K a21 [7:0] $end
$var wire 8 L a12 [7:0] $end
$var wire 8 M a11 [7:0] $end
$var reg 8 N a_in1 [7:0] $end
$var reg 8 O a_in2 [7:0] $end
$var reg 3 P counter [2:0] $end
$var integer 32 Q i [31:0] $end
$upscope $end
$scope module systolic_array_inst $end
$var wire 8 R a_in1 [7:0] $end
$var wire 8 S a_in2 [7:0] $end
$var wire 1 ! clk $end
$var wire 1 0 load_weight $end
$var wire 1 " reset $end
$var wire 1 ( valid $end
$var wire 8 T weight4 [7:0] $end
$var wire 8 U weight3 [7:0] $end
$var wire 8 V weight2 [7:0] $end
$var wire 8 W weight1 [7:0] $end
$var wire 8 X acc_out2 [7:0] $end
$var wire 8 Y acc_out1 [7:0] $end
$var wire 8 Z acc_inter_01 [7:0] $end
$var wire 8 [ acc_inter_00 [7:0] $end
$var wire 8 \ a_out2 [7:0] $end
$var wire 8 ] a_out1 [7:0] $end
$var wire 8 ^ a_inter_11 [7:0] $end
$var wire 8 _ a_inter_01 [7:0] $end
$scope module PE00 $end
$var wire 8 ` a_in [7:0] $end
$var wire 8 a acc_in [7:0] $end
$var wire 1 ! clk $end
$var wire 1 0 load_weight $end
$var wire 1 " reset $end
$var wire 1 ( valid $end
$var wire 8 b weight [7:0] $end
$var reg 8 c a_out [7:0] $end
$var reg 8 d acc_out [7:0] $end
$var reg 16 e weight_reg [15:0] $end
$upscope $end
$scope module PE01 $end
$var wire 8 f a_in [7:0] $end
$var wire 8 g acc_in [7:0] $end
$var wire 1 ! clk $end
$var wire 1 0 load_weight $end
$var wire 1 " reset $end
$var wire 1 ( valid $end
$var wire 8 h weight [7:0] $end
$var reg 8 i a_out [7:0] $end
$var reg 8 j acc_out [7:0] $end
$var reg 16 k weight_reg [15:0] $end
$upscope $end
$scope module PE10 $end
$var wire 8 l a_in [7:0] $end
$var wire 8 m acc_in [7:0] $end
$var wire 1 ! clk $end
$var wire 1 0 load_weight $end
$var wire 1 " reset $end
$var wire 1 ( valid $end
$var wire 8 n weight [7:0] $end
$var reg 8 o a_out [7:0] $end
$var reg 8 p acc_out [7:0] $end
$var reg 16 q weight_reg [15:0] $end
$upscope $end
$scope module PE11 $end
$var wire 8 r a_in [7:0] $end
$var wire 8 s acc_in [7:0] $end
$var wire 1 ! clk $end
$var wire 1 0 load_weight $end
$var wire 1 " reset $end
$var wire 1 ( valid $end
$var wire 8 t weight [7:0] $end
$var reg 8 u a_out [7:0] $end
$var reg 8 v acc_out [7:0] $end
$var reg 16 w weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope module ub $end
$var wire 8 x acc1_mem_0 [7:0] $end
$var wire 8 y acc1_mem_1 [7:0] $end
$var wire 8 z acc2_mem_0 [7:0] $end
$var wire 8 { acc2_mem_1 [7:0] $end
$var wire 13 | addr [12:0] $end
$var wire 1 ! clk $end
$var wire 1 1 load_input $end
$var wire 1 " reset $end
$var wire 1 + store $end
$var wire 1 8 store_acc1 $end
$var wire 1 5 store_acc2 $end
$var reg 8 } out_ub_00 [7:0] $end
$var reg 8 ~ out_ub_01 [7:0] $end
$var reg 8 !" out_ub_10 [7:0] $end
$var reg 8 "" out_ub_11 [7:0] $end
$var reg 6 #" write_pointer [5:0] $end
$scope begin $unm_blk_47 $end
$var integer 32 $" i [31:0] $end
$upscope $end
$upscope $end
$scope module wm $end
$var wire 13 %" addr [12:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 8 &" weight1 [7:0] $end
$var reg 8 '" weight2 [7:0] $end
$var reg 8 (" weight3 [7:0] $end
$var reg 8 )" weight4 [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b1000000 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b11 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b10 D
b0 C
b0 B
b0 A
b0 @
b10 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
08
b0 7
b0 6
05
b0 4
b0 3
b0 2
01
00
b0 /
b0 .
b0 -
b0 ,
0+
b0 *
b0 )
0(
b0 '
b0 &
b0 %
b0 $
0#
0"
1!
$end
#500
0!
#1000
1!
#1500
0!
#2000
1!
#2500
0!
#3000
1!
#3500
0!
#4000
1!
#4500
0!
#5000
1!
#5500
0!
#6000
1!
#6500
0!
#7000
1!
#7500
0!
#8000
1!
#8500
0!
#9000
1!
#9500
0!
#10000
1!
#10500
0!
#11000
1!
#11500
0!
#12000
1!
#12500
0!
#13000
bx $
bx T
bx t
bx )"
bx %
bx U
bx h
bx ("
bx &
bx V
bx n
bx '"
bx '
bx W
bx b
bx &"
1!
#13500
0!
#14000
1!
#14500
0!
#15000
1!
#15500
0!
#16000
1!
#16500
0!
#17000
1#
1!
#17500
0!
#18000
0#
b110 $
b110 T
b110 t
b110 )"
b101 %
b101 U
b101 h
b101 ("
b100 &
b100 V
b100 n
b100 '"
b11 '
b11 W
b11 b
b11 &"
b1111 2
b1111 E
b1111 |
b1111 %"
b10000000001111 F
b1 G
1!
#18500
0!
#19000
10
b100000000000000 F
b1 I
b10 G
1!
#19500
0!
#20000
10
b1 G
b11 e
b101 k
b100 q
b110 w
1!
#20500
0!
#21000
bx $
bx T
bx t
bx )"
bx %
bx U
bx h
bx ("
bx &
bx V
bx n
bx '"
bx '
bx W
bx b
bx &"
b11110 2
b11110 E
b11110 |
b11110 %"
00
b10000000011110 F
b10 I
b10 G
1!
#21500
0!
#22000
b1 G
1!
#22500
0!
#23000
11
b110000000000000 F
b11 I
b10 G
1!
#23500
0!
#24000
11
b10110 ,
b10110 J
b10110 ""
b10101 -
b10101 K
b10101 !"
b1100 .
b1100 L
b1100 ~
b1011 /
b1011 M
b1011 }
b1 G
1!
#24500
0!
#25000
1(
01
b1000000000000000 F
b100 I
b10 G
1!
#25500
0!
#26000
1(
b1 H
b1 P
b1011 :
b1011 N
b1011 R
b1011 `
1!
#26500
0!
#27000
1(
b1011 _
b1011 c
b1011 f
b100001 [
b100001 d
b100001 m
b10 P
b10101 9
b10101 O
b10101 S
b10101 l
b1100 :
b1100 N
b1100 R
b1100 `
b10 H
1!
#27500
0!
#28000
b1110101 6
b1110101 =
b1110101 y
b1110101 7
b1110101 <
b1110101 x
18
1(
b1 >
b11 H
b11 P
b10110 9
b10110 O
b10110 S
b10110 l
b0 :
b0 N
b0 R
b0 `
b1100 _
b1100 c
b1100 f
b100100 [
b100100 d
b100100 m
b1011 ]
b1011 i
b110111 Z
b110111 j
b110111 s
b10101 ^
b10101 o
b10101 r
b1110101 *
b1110101 ;
b1110101 Y
b1110101 p
1!
#28500
0!
#29000
b1 C
b1111100 6
b1111100 =
b1111100 y
1(
b10101 \
b10101 u
b10110101 )
b10110101 @
b10110101 X
b10110101 v
b10110 ^
b10110 o
b10110 r
b1111100 *
b1111100 ;
b1111100 Y
b1111100 p
b1100 ]
b1100 i
b111100 Z
b111100 j
b111100 s
b0 _
b0 c
b0 f
b0 [
b0 d
b0 m
b0 9
b0 O
b0 S
b0 l
b100 H
1!
#29500
0!
#30000
b111 2
b111 E
b111 |
b111 %"
0(
b10000000000111 F
b101 I
b11000000 3
b11000000 B
b11000000 {
b10110101 4
b10110101 A
b10110101 z
15
b101 H
b0 ]
b0 i
b0 Z
b0 j
b0 s
b0 ^
b0 o
b0 r
b0 *
b0 ;
b0 Y
b0 p
b10110 \
b10110 u
b11000000 )
b11000000 @
b11000000 X
b11000000 v
1!
#30500
0!
#31000
b1 G
1!
#31500
0!
#32000
b1011 #"
1+
b1010000000000000 F
b110 I
b10 G
1!
#32500
0!
#33000
1+
b1 G
1!
#33001
